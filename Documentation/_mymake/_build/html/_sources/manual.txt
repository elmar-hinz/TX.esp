==================================
TYPO3 EXT: Stored procedures (esp)
==================================

Overview
========

The extension *Stored Porcedures* is an interface to access *MySql Stored Procedures*
directly from TypoScript for read and write operations on the underlying database. 
Performance can be gained both in coding and in program execution if you choose it for 
the right usecases. For the beginning only MySql will be supported. 


Theoretical considerations
==========================

Why stored procedures?
----------------------

The original field of stored procedures is to perform update operations on complex databases, 
with regard to the referential integrity, by encapsulating business logic into the datase 
and separating it from client programming on top.

In contrast in the field of TYPO3 the referential integrity of update operations is controlled 
by the TCE. Here stored procedures focus on select operations avoiding heavy PHP layers
like extbase for read operations, especially for non-cached like USER_INT.  

As a side effect in development you can often get along with only two layers, TypoScript for 
the presentation layer and stored procedures for the model, not to mess about with PHP at all.

It is not that *Mysql Stored Procedures* are generally faster by nature. That is a complex
field influenced by many factors. In the context of TYPO3 there are usecases where you can 
gain performance in comparism to other solutions.

A matter of taste
-----------------

Extbase as an *Object Relational Mapper* is focused on modelling the domain in form of PHP
objects. In theory you would not bother with the persistance layer at all. In practice you
addintionally have to define the persistance layer in form ot TCA and SQL definitions. Overall
you deal with 3 layers, the database, PHP and TypoScript.

On contrary *stored procedures* are focused on the relational model of the SQL database. It
joins the tables in form of SQL queries to produce the view the frontend wants to display. 
There is no such thing like a domain model. You go with stored procedures and TypoScript, 
without the use of PHP. 

You could conclude thinking in form of a relational data model is rather oldschool, but it 
depends on the field of the application, if a relational or an object orientated data model
is superior.  

If your data is already organized in a relational model for historical reasons, it is kind
of overhead in planning and in performance to put an additional object orientated layer on
top of it.

After all it depends on the siklls of the development team, if it prefers to focus on PHP 
or on TypoScript and SQL.

Why not Mysql Views?
--------------------

Good interjection. In theory you would use SQL views to provide a comforatable read interface 
to the database, while stored procedures are rather targeted for write operations. The issue 
with views in MySql is performance. Exactly where views start to become ambitious, they 
lose their ability to access table indexes an slow down matters in MySql.

This extension *Stored Procedures* places the query results into a temporary table, from where 
they are rendered by the well known techniques of TypoScript. So this temporary talbes are 
kind of replacement for sucking views in MySql.

Apart from performance there are some usecases, where views would be limited compared to the 
possibilities of programmable stored procedures.

Having said this, there are many usecases, where views are a good choice as long as they 
can make use of the *merge algorithem* to be more precisely. Simply google for it.

How it works
============

Using a temporary table
-----------------------

Stored procedures are called with parameters. The parameters can be used as bidirectional channels
by setting them to INOUT. However they can not pass arrays, so they are not usable to return a
multiline result. I guess on reason is, that procedures are not targetet to read operations originally.

A temporary table is used to circumvent this limitation. It can be accessed like any other table from
TypoScript. 

Limiting the scope of the temporary table
-----------------------------------------

Unfortunatly the scope of a temporary table is not automatically limited to a single page request, 
because TYPO3 makes use of *mysql_pconnet*. The test case *tx_esp_TemporaryTableBehaviourTest* 
shipped with this extension does some efforts to compare *mysql_pconnet* and *mysql_connect* 
with regards to the scope of a temporary table. The extension phpunit installs a BE module to 
run the test case.  

The only clean solution to avoid conflicts seems to identify each temporary table with a random
part in its name. The table name with the random part is generated by the library and always 
given to the stored procedure as the first paramter. The stored procedure must use this name 
for the temporary table.

Bypassing accessibility checks of CONTENT
-----------------------------------------

You want be able to read the temporary table with the TypoScript CONTENT object. It automatically
generates parts of the WHERE clause depending on the visibility of the page the datasets 
are stored in. Either you would have to export the data be setting the pid to a non-hidden page 
(the current page would be an idea) or you have to take care to turn of the automatically 
generated where clause.

We take the second approach. We set the pid to page zero (the globus), which is usally 
inaccessible. If we prefix the name of the temporary table with *static_* the data is 
automatically accessible. This feature of the core is targeted for other uses, but it is the 
only way to bypass the accessibility check for pids of zero.  The tablename is automatically 
prefixed. The tablename is generated for you as already mentiond in the previous section.


Example usecases
================

Breadcrumb/rootline
-------------------

To find the rootline of a given page recursive queries upon the same table have to be executed.
This is not supported by SQL itself. Implementing it by use of PHP results in an exessive ping
pong betwenn the PHP layer and the database at the cost of a lot of resources.  Compiled into a 
stored procedure, it is simple loop, and should be faster. For the example of a breadcrumb a
stored procedure and a TypoScript template is included.

Joined tables
-------------

Many web based search interfaces call SQL queries on a set of tables as a JOIN. Here we can 
gain simplicity and performance with stored procedures.  A joined table query results in a 
filtered cartesian product of the involved tables. Typically we want to display the result 
in a hierarchical way first grouping the rows by the first table, then by the second, optionally 
more levels. A rendering class is included to controll this kind of grouped rendering. 







