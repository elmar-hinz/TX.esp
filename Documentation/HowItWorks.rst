
How it Works
============

Using a temporary table to access the result
--------------------------------------------

*Stored procedures* are called with parameters. The parameters can be used as bidirectional channels
by setting them to *INOUT*. However they can not pass arrays, so they are not usable to return a
multiline result. I guess on reason is, that procedures are not targetet to read operations originally.

A temporary table is used to circumvent this limitation. It can be accessed like any other table from
TypoScript. 


Limiting the scope of the temporary table with a random identifier
------------------------------------------------------------------

Unfortunatly the scope of a temporary table is not automatically limited to a single page request, 
because TYPO3 makes use of *mysql_pconnect*. That is an advantage for performance on the other hand, 
but it complicates dealing with temporary tables.

The test case *tx_esp_TemporaryTableBehaviourTest* shipped with this extension does some efforts 
to compare *mysql_pconnet* and *mysql_connect* with regards to the scope of a temporary table. 
The extension phpunit installs a BE module to run the test case.  

The only clean solution to avoid conflicts seems to identify each temporary table with a random
part in its name. The table name with the random part is generated by the library and always 
given to the stored procedure as the first paramter. The stored procedure must use this name 
for the temporary table.

Bypassing accessibility checks of CONTENT with the prefix static_
-----------------------------------------------------------------

You want be able to read the temporary table with the TypoScript **CONTENT** object. It automatically
generates parts of the *WHERE* clause depending on the visibility of the page the datasets 
are stored in. Either you would have to export the data by setting the pid to a non-hidden page 
(the current page would be an idea) or you have to take care to turn off the automatically 
generated WHERE clause.

We take the second approach. We set the pid to page zero (the globus), which is usally 
inaccessible. If we prefix the name of the temporary table with **static_** the data is 
automatically accessible. This feature of the core is targeted for other uses, but it is the 
only way to bypass the accessibility check for pids of zero.  The tablename is automatically 
prefixed. The tablename is generated for you as already mentiond in the previous section.


